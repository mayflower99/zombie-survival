<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="gJ%RJDO*}#K1r{M[(LkF" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="[2zKeF}_Ov/WMRMC)anr" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Bob{" line1="    sprite:Sprite = sprites.create(assets.image`bobFacingBackwards`, SpriteKind.Player)" line2="    constructor(){" line3="        tiles.placeOnTile(this.sprite, tiles.getTileLocation(14, 14))" line4="        scene.cameraFollowSprite(this.sprite)" line5="        setUp()" line6="    }" line7="    right(){" line8="        this.sprite.setImage(assets.image`bobFacingRight`)" line9="        this.sprite.setVelocity(50,0)" line10="    }" line11="    left() {" line12="        this.sprite.setImage(assets.image`bobFacingLeft`)" line13="        this.sprite.setVelocity(-50, 0)" line14="    }" line15="    up() {" line16="        this.sprite.setImage(assets.image`bobFacingForwards`)" line17="        this.sprite.setVelocity(0, -50)" line18="    }" line19="    down() {" line20="        this.sprite.setImage(assets.image`bobFacingBackwards`)" line21="        this.sprite.setVelocity(0,50)" line22="    }" line23="    stopX(){   " line24="        this.sprite.vx= 0" line25="    }" line26="    stopY() {" line27="        this.sprite.vy = 0" line28="    }" line29="}" numlines="30"></mutation><next><block type="typescript_statement" id="%7Id|[Rd*tv9:sEZNi-A" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let bob = new Bob" numlines="1" declaredvars="bob"></mutation><next><block type="typescript_statement" id="9]V(HWj(Ji(qKnr29#9h" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Map{" line1="    tilemapCenter:Array&lt;number&gt;" line2="    tileMapLocation:Array&lt;number&gt;" line3="    homeTileMap = assets.tilemap`startingMap`" line4="    awayTileMap = assets.tilemap`otherTilemapImage1`" line5="    mapDimentions:number " line6="    largeMap:Array&lt;Array&lt;Array&lt;Array&lt;number&gt;&gt;&gt;&gt; = []" line7="    biomes: Array&lt;Array&lt;Image&gt;&gt; = [[assets.tile`bigRockTile`], [assets.tile`smallRockTile`],[],[]]" line8="    constructor(){" line9="        this.createlargemap(30)" line10="        //only even numbers(30)" line11="    }" line12="    createlargemap(size:number){" line13="        for (let a = 0; a &lt; size - 1; a++) {" line14="            this.largeMap.push([])" line15="            for (let b = 0; b &lt; size - 1; b++) {" line16="                this.largeMap[a].push([])" line17="            }" line18="" line19="        }" line20="        for(let c = 0; c &lt;size-1; c++){" line21="            for(let d = 0; d &lt; size-1; d++){" line22="                let newChunk = this.generateNewChunk()" line23="                this.largeMap[c][d] = newChunk" line24="            }" line25="" line26="        }" line27="        this.mapDimentions = size" line28="        this.tilemapCenter = [Math.floor(size/2)-1,Math.floor(size/2)-1]" line29="        this.tileMapLocation = [Math.floor(size / 2) - 1, Math.floor(size / 2) - 1]" line30="    }" line31="    generateNewChunk(){" line32="        let newChunk2:Array&lt;Array&lt;number&gt;&gt; = []" line33="        for (let e = 0; e &lt; 15; e++) {" line34="            newChunk2.push([])" line35="            for (let f = 0; f &lt; 15; f++) {" line36="                this.randomTiles(newChunk2,e,f,0)" line37="            }" line38="        }" line39="        return newChunk2" line40="    }" line41="    randomTiles(array: Array&lt;Array&lt;number&gt;&gt;,a:number,b:number,biome:number){" line42="        if(a == 0 ||b== 0 ||a==15 || b== 15){" line43="            array[a].push(1)" line44="        } else if (Math.percentChance(5)){" line45="            array[a].push(2)" line46="        } else if (Math.percentChance(10)) {" line47="            array[a].push(3)" line48="        }else{" line49="            array[a].push(0)" line50="        }" line51="    }" line52="    renderTilemap(){" line53="        for(let g = 0; g &lt; 15; g++){" line54="            for(let h = 0; h &lt; 15; h++){" line55="                if (this.largeMap[this.tileMapLocation[0]][this.tileMapLocation[1]][g][h] == 1){" line56="                    " line57="                    tiles.setWallAt(tiles.getTileLocation(g, h), true)" line58="                } else if (this.largeMap[this.tileMapLocation[0]][this.tileMapLocation[1]][g][h] == 2){" line59="                    this.awayTileMap.setTile(g, h, 9)" line60="                    tiles.setWallAt(tiles.getTileLocation(g, h), true)" line61="                } else if (this.largeMap[this.tileMapLocation[0]][this.tileMapLocation[1]][g][h] == 3){" line62="                    this.awayTileMap.setTile(g, h, 9)" line63="                    tiles.setWallAt(tiles.getTileLocation(g, h), true)" line64="                } else if (this.largeMap[this.tileMapLocation[0]][this.tileMapLocation[1]][g][h] == 0){" line65="                    this.awayTileMap.setTile(g, h, 9)" line66="                    tiles.setWallAt(tiles.getTileLocation(g, h), true)" line67="                }" line68="            }" line69="        }" line70="        tiles.setCurrentTilemap(this.awayTileMap)" line71="    }" line72="    move(){" line73="" line74="        if(this.tileMapLocation == this.tilemapCenter){" line75="            if(bob.sprite.y&gt; 260){" line76="                this.tileMapLocation[1] = this.tileMapLocation[1] - 1" line77="            }else if(bob.sprite.y &lt; 210){" line78="                this.tileMapLocation[1] = this.tileMapLocation[1] + 1" line79="            }else if(bob.sprite.x &lt; 180){" line80="                this.tileMapLocation[0] = this.tileMapLocation[0] - 1" line81="            }else if(bob.sprite.x &gt; 315){" line82="                this.tileMapLocation[0] = this.tileMapLocation[0] + 1" line83="            }" line84="        }else{" line85="            if (bob.sprite.y &gt; 180) {" line86="                this.tileMapLocation[1] = this.tileMapLocation[1] - 1" line87="            } else if (bob.sprite.y &lt; 80) {" line88="                this.tileMapLocation[1] = this.tileMapLocation[1] + 1" line89="            } else if (bob.sprite.x &lt; 80) {" line90="                this.tileMapLocation[0] = this.tileMapLocation[0] - 1" line91="            } else if (bob.sprite.x &gt; 180) {" line92="                this.tileMapLocation[0] = this.tileMapLocation[0] + 1" line93="            }" line94="        }" line95="" line96="    }" line97="    loadMap(prePost:Array&lt;number&gt;){" line98="        bob.sprite.setPosition(10,10)" line99="        console.log(this.largeMap[this.tileMapLocation[0]][this.tileMapLocation[1]])" line100="        if(this.tileMapLocation == this.tilemapCenter){" line101="            tiles.setCurrentTilemap(this.homeTileMap)" line102="        } else if (this.tileMapLocation[0] &gt;= this.mapDimentions-1 || this.tileMapLocation[1] &gt;= this.mapDimentions-1 || this.tileMapLocation[0] &lt;= 0 || this.tileMapLocation[1] &lt;= 0){" line103="            game.showLongText(&quot;You shouldn't venture this far&quot;, DialogLayout.Bottom)" line104="        }else{  " line105="            this.renderTilemap()" line106="        }" line107="    }" line108="}" numlines="109"></mutation><next><block type="typescript_statement" id="PK~Cs{l0fSAS0zm_iP]^" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let map = new Map" numlines="1" declaredvars="map"></mutation><next><block type="typescript_statement" id="r_4dMzjE|XFI#D_f`WPm" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let largeMap = map.largeMap" numlines="1" declaredvars="largeMap"></mutation><next><block type="typescript_statement" id="@4W+/q%4-dBt!oN1(_Li" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace controllers{" line1="    controller.up.onEvent(ControllerButtonEvent.Pressed, function() {" line2="        bob.up()" line3="    })" line4="    controller.down.onEvent(ControllerButtonEvent.Pressed, function () {" line5="        bob.down()" line6="    })" line7="    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {" line8="        bob.right()" line9="    })" line10="    controller.left.onEvent(ControllerButtonEvent.Pressed, function () {" line11="        bob.left()" line12="    })" line13="    controller.up.onEvent(ControllerButtonEvent.Released, function () {" line14="        if (bob.sprite.vy &lt; 0) {" line15="            bob.stopY()" line16="        }" line17="    })" line18="    controller.down.onEvent(ControllerButtonEvent.Released, function () {" line19="        if (bob.sprite.vy &gt; 0) {" line20="            bob.stopY()" line21="        }" line22="    })" line23="    controller.left.onEvent(ControllerButtonEvent.Released, function () {" line24="        if(bob.sprite.vx &lt; 0){" line25="            bob.stopX()        " line26="        }" line27="" line28="    })" line29="    controller.right.onEvent(ControllerButtonEvent.Released, function () {" line30="        if (bob.sprite.vx &gt; 0) {" line31="            bob.stopX()" line32="        }" line33="    })    " line34="}" numlines="35"></mutation><next><block type="typescript_statement" id="^YnH:_uyoHnmjPTVXB?9" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tileOverlaps{" line1="" line2="    scene.onOverlapTile(SpriteKind.Player, assets.tile`gateTile`, function(sprite: Sprite, location: tiles.Location) {" line3="" line4="        timer.throttle(&quot;action&quot;, 2000, function() {" line5="            let prePost = map.tileMapLocation" line6="            map.move()" line7="            map.loadMap(prePost)" line8="        })" line9="    })" line10="}" numlines="11"></mutation><next><block type="mapsettileat" id="%0bk5V5t~~r9I[!|yX/B"><value name="tile"><shadow type="tileset_tile_picker" id="[Rs+,}!5@6VKLTg%N^SQ"><field name="tile">assets.tile`myTile0`</field></shadow></value><value name="loc"><shadow type="mapgettile" id="IUO]aoaPxK`!QF~d5T{Q"><value name="col"><shadow type="math_number" id="#~@a*XBmG9Ma?N+WZsGc"><field name="NUM">0</field></shadow></value><value name="row"><shadow type="math_number" id=":Eu1(j^iM;93Ej.}-*L}"><field name="NUM">0</field></shadow></value></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="function_definition" id="u~?V!PoG_zfw{TEO/mhz" x="1707" y="20"><mutation name="setUp" functionid="Ek@0VuQXLqx0JN.NYXAj"></mutation><field name="function_name">setUp</field><statement name="STACK"><block type="set_current_tilemap" id="*-c~dwFD6UVk0#a;|-fq"><comment pinned="false" h="80" w="160">color.setPalette(color.GrayScale)</comment><value name="tilemap"><shadow type="tiles_tilemap_editor" id="dy1i9mUUTp49xI`Z0rvT"><field name="tilemap">tilemap`startingMap`</field><data>{"commentRefs":[],"fieldData":{"tilemap":"level1"}}</data></shadow></value></block></statement></block></xml>