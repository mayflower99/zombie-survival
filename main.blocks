<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="[U^O{r3)iI%k_mN-!xmt">myMinimap</variable><variable id="_)F-g,s:P@VA=m?JLDtS">item</variable><variable id="Y/j4gX;GJ#4,.2~A|,,[">mySprite</variable><variable type="KIND_SpriteKind" id="f.111Je|#+7rJvkvX)zr">Player</variable><variable type="KIND_SpriteKind" id="L-T56M]*iY-!WxQzT+S#">Projectile</variable><variable type="KIND_SpriteKind" id="0.9P[RMr)M_?A`4=)t(=">Food</variable><variable type="KIND_SpriteKind" id="wRm!fQB3E8ccxf2|K@nC">Enemy</variable></variables><block type="pxt-on-start" id="AVEAQ!Goa5?S)[Ld}_T." x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="5F):7p(85yqFZ?:Ue.C8" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Bob{" line1="" line2="    sprite:Sprite = sprites.create(assets.image`bobFacingBackwards`, SpriteKind.Player)" line3="    constructor(){" line4="        tiles.placeOnTile(this.sprite, tiles.getTileLocation(14, 14))" line5="        scene.cameraFollowSprite(this.sprite)" line6="        setUp()" line7="    }" line8="    right(){" line9="        this.sprite.setImage(assets.image`bobFacingRight`)" line10="        this.sprite.setVelocity(50,0)" line11="    }" line12="    left() {" line13="        this.sprite.setImage(assets.image`bobFacingLeft`)" line14="        this.sprite.setVelocity(-50, 0)" line15="    }" line16="    up() {" line17="        this.sprite.setImage(assets.image`bobFacingForwards`)" line18="        this.sprite.setVelocity(0, -50)" line19="    }" line20="    down() {" line21="        this.sprite.setImage(assets.image`bobFacingBackwards`)" line22="        this.sprite.setVelocity(0,50)" line23="    }" line24="    stopX(){   " line25="        this.sprite.vx= 0" line26="    }" line27="    stopY() {" line28="        this.sprite.vy = 0" line29="    }" line30="}" numlines="31"></mutation><next><block type="typescript_statement" id="EM.1emz|lMKWblIyA`QB" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let bob = new Bob" numlines="1" declaredvars="bob"></mutation><next><block type="typescript_statement" id="j(iOYQ5Mdbc!Hp](*qfT" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Map{" line1="    tilemapCenter:Array&lt;number&gt;" line2="    tileMapLocation:Array&lt;number&gt;" line3="    homeTileMap = assets.tilemap`startingMap`" line4="    awayTileMap = assets.tilemap`otherTilemapImage1`" line5="    mapDimentions:number " line6="    largeMap:Array&lt;Array&lt;Array&lt;Array&lt;number&gt;&gt;&gt;&gt; = []" line7="    biomes: Array&lt;Array&lt;Image&gt;&gt; = [[assets.tile`bigRockTile`], [assets.tile`smallRockTile`],[],[]]" line8="    constructor(){" line9="        this.createlargemap(30)" line10="        //only even numbers(30)" line11="    }" line12="    createlargemap(size:number){" line13="        for (let a = 0; a &lt; size - 1; a++) {" line14="            this.largeMap.push([])" line15="            for (let b = 0; b &lt; size - 1; b++) {" line16="                this.largeMap[a].push([])" line17="            }" line18="" line19="        }" line20="        for(let c = 0; c &lt;size-1; c++){" line21="            for(let d = 0; d &lt; size-1; d++){" line22="                let newChunk = this.generateNewChunk()" line23="                this.largeMap[c][d] = newChunk" line24="            }" line25="" line26="        }" line27="        this.mapDimentions = size" line28="        this.tilemapCenter = [Math.floor(size/2)-1,Math.floor(size/2)-1]" line29="        this.tileMapLocation = [Math.floor(size / 2) - 1, Math.floor(size / 2) - 1]" line30="    }" line31="    generateNewChunk(){" line32="        let newChunk2:Array&lt;Array&lt;number&gt;&gt; = []" line33="        for (let e = 0; e &lt;= 15; e++) {" line34="            newChunk2.push([])" line35="            for (let f = 0; f &lt;= 15; f++) {" line36="                this.randomTiles(newChunk2,e,f,0)" line37="            }" line38="        }" line39="        return newChunk2" line40="    }" line41="    randomTiles(array: Array&lt;Array&lt;number&gt;&gt;,a:number,b:number,biome:number){" line42="        if (((b == 0) &amp;&amp; ((a == 7) || (a == 8))) || ((b == 15) &amp;&amp; ((a == 7) || (a == 8)))){" line43="            array[a].push(4)" line44="        }else if(a == 0 ||b== 0 ||a==15 || b== 15){" line45="            array[a].push(1)" line46="        } else if (Math.percentChance(5)){" line47="            array[a].push(2)" line48="        } else if (Math.percentChance(10)) {" line49="            array[a].push(3)" line50="        }else{" line51="            array[a].push(0)" line52="        }" line53="    }" line54="    renderTilemap(){" line55="        for(let g = 0; g &lt;= 15; g++){" line56="            for(let h = 0; h &lt;= 15; h++){" line57="                if (this.largeMap[this.tileMapLocation[0]][this.tileMapLocation[1]][g][h] == 1){" line58="                    tiles.setTileAt(tiles.getTileLocation(g, h), assets.tile`forestTile`)" line59="                    tiles.setWallAt(tiles.getTileLocation(g, h), true)" line60="                } else if (this.largeMap[this.tileMapLocation[0]][this.tileMapLocation[1]][g][h] == 2){" line61="                    tiles.setTileAt(tiles.getTileLocation(g, h), assets.tile`smallStonesTile`)" line62="                } else if (this.largeMap[this.tileMapLocation[0]][this.tileMapLocation[1]][g][h] == 3){" line63="                    tiles.setTileAt(tiles.getTileLocation(g, h), assets.tile`bigRockTile`)" line64="                } else if (this.largeMap[this.tileMapLocation[0]][this.tileMapLocation[1]][g][h] == 0){" line65="                    tiles.setTileAt(tiles.getTileLocation(g, h), assets.tile`grassTile`)" line66="                } else if (this.largeMap[this.tileMapLocation[0]][this.tileMapLocation[1]][g][h] == 4){" line67="                    tiles.setTileAt(tiles.getTileLocation(g, h), assets.tile`gateTile`)" line68="                }" line69="            }" line70="        }" line71="" line72="        tiles.setCurrentTilemap(this.awayTileMap)" line73="        tiles.placeOnRandomTile(bob.sprite, assets.tile`grassTile`)" line74="    }" line75="    move(){" line76="" line77="        if(this.tileMapLocation == this.tilemapCenter){" line78="            if(bob.sprite.y&gt; 260){" line79="                this.tileMapLocation[1] = this.tileMapLocation[1] - 1" line80="            }else if(bob.sprite.y &lt; 210){" line81="                this.tileMapLocation[1] = this.tileMapLocation[1] + 1" line82="            }else if(bob.sprite.x &lt; 180){" line83="                this.tileMapLocation[0] = this.tileMapLocation[0] - 1" line84="            }else if(bob.sprite.x &gt; 315){" line85="                this.tileMapLocation[0] = this.tileMapLocation[0] + 1" line86="            }" line87="        }else{" line88="            if (bob.sprite.y &gt; 180) {" line89="                this.tileMapLocation[1] = this.tileMapLocation[1] - 1" line90="            } else if (bob.sprite.y &lt; 80) {" line91="                this.tileMapLocation[1] = this.tileMapLocation[1] + 1" line92="            } else if (bob.sprite.x &lt; 80) {" line93="                this.tileMapLocation[0] = this.tileMapLocation[0] - 1" line94="            } else if (bob.sprite.x &gt; 180) {" line95="                this.tileMapLocation[0] = this.tileMapLocation[0] + 1" line96="            }" line97="        }" line98="" line99="    }" line100="    loadMap(prePost:Array&lt;number&gt;){" line101="        bob.sprite.setPosition(10,10)" line102="        console.log(this.largeMap[this.tileMapLocation[0]][this.tileMapLocation[1]])" line103="        if(this.tileMapLocation == this.tilemapCenter){" line104="            tiles.setCurrentTilemap(this.homeTileMap)" line105="        } else if (this.tileMapLocation[0] &gt;= this.mapDimentions-1 || this.tileMapLocation[1] &gt;= this.mapDimentions-1 || this.tileMapLocation[0] &lt;= 0 || this.tileMapLocation[1] &lt;= 0){" line106="            game.showLongText(&quot;You shouldn't venture this far&quot;, DialogLayout.Bottom)" line107="        }else{  " line108="            this.renderTilemap()" line109="        }" line110="    }" line111="}" numlines="112"></mutation><next><block type="typescript_statement" id="RZg4e2?0N0`vjQuL:wd~" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let map = new Map" numlines="1" declaredvars="map"></mutation><next><block type="typescript_statement" id="QV?URLaIl%/-k=U,JiX5" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let largeMap = map.largeMap" numlines="1" declaredvars="largeMap"></mutation><next><block type="typescript_statement" id="q=k6t3|FE%)2!jykwTS;" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace controllers{" line1="    controller.up.onEvent(ControllerButtonEvent.Pressed, function() {" line2="        bob.up()" line3="    })" line4="    controller.down.onEvent(ControllerButtonEvent.Pressed, function () {" line5="        bob.down()" line6="    })" line7="    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {" line8="        bob.right()" line9="    })" line10="    controller.left.onEvent(ControllerButtonEvent.Pressed, function () {" line11="        bob.left()" line12="    })" line13="    controller.up.onEvent(ControllerButtonEvent.Released, function () {" line14="        if (bob.sprite.vy &lt; 0) {" line15="            bob.stopY()" line16="        }" line17="    })" line18="    controller.down.onEvent(ControllerButtonEvent.Released, function () {" line19="        if (bob.sprite.vy &gt; 0) {" line20="            bob.stopY()" line21="        }" line22="    })" line23="    controller.left.onEvent(ControllerButtonEvent.Released, function () {" line24="        if(bob.sprite.vx &lt; 0){" line25="            bob.stopX()        " line26="        }" line27="" line28="    })" line29="    controller.right.onEvent(ControllerButtonEvent.Released, function () {" line30="        if (bob.sprite.vx &gt; 0) {" line31="            bob.stopX()" line32="        }" line33="    })    " line34="}" numlines="35"></mutation><next><block type="typescript_statement" id="/ijH!:_D[Tt)D#|]Dk9w" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tileOverlaps{" line1="" line2="    scene.onOverlapTile(SpriteKind.Player, assets.tile`gateTile`, function(sprite: Sprite, location: tiles.Location) {" line3="" line4="        timer.throttle(&quot;action&quot;, 2000, function() {" line5="            let prePost = map.tileMapLocation" line6="            map.move()" line7="            map.loadMap(prePost)" line8="        })" line9="    })" line10="}" numlines="11"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="function_definition" id="??VCdylH}-QdP?q`?Ec_" x="1510" y="-10"><mutation name="setUp" functionid="sPSz]S6J!c%$IHXFiRt*"></mutation><field name="function_name">setUp</field><statement name="STACK"><block type="variables_set" id="lWsW+rsIvA3|cDpQwdUF"><field name="VAR" id="Y/j4gX;GJ#4,.2~A|,,[">mySprite</field><value name="VALUE"><shadow xmlns="http://www.w3.org/1999/xhtml" type="math_number"><field name="NUM">0</field></shadow><block type="spritescreate" id="us?Ho7XZ?U]5M~3XJnMd"><value name="img"><shadow type="screen_image_picker" id="9MR;9D:])!*;Cxn?3F-X"><field name="img">assets.image`bobFacingLeft`</field><data>{"commentRefs":[],"fieldData":{"img":"myImages.image9"}}</data></shadow></value><value name="kind"><shadow type="spritekind" id="Wt4@e,x|JfzqcpPh)l2d"><field name="MEMBER">Player</field></shadow></value></block></value><next><block type="set_current_tilemap" id="idBc:nvEmBfE[3:Crzk`"><comment pinned="false" h="80" w="160">color.setPalette(color.GrayScale)</comment><value name="tilemap"><shadow type="tiles_tilemap_editor" id="n:y{h83%d^$?m2]@O,Y9"><field name="tilemap">tilemap`startingMap`</field><data>{"commentRefs":[],"fieldData":{"tilemap":"level1"}}</data></shadow></value><next><block type="variables_set" id="c[b~(*Qm~XA]2|p-2cGx"><field name="VAR" id="[U^O{r3)iI%k_mN-!xmt">myMinimap</field><value name="VALUE"><shadow type="math_number" id="i%r{159n7m]1MLlBAbfs"><field name="NUM">0</field></shadow><block type="minimap_getImage" id="]3PrLlJ6UB6WI^RvZ@WP"><value name="minimap"><shadow type="create_minimap" id="$fmh+G+av7LBX$A=7,y0"><mutation xmlns="http://www.w3.org/1999/xhtml" _expanded="0" _input_init="false"></mutation></shadow><block type="create_minimap" id="$4Fcidvu`3DL4KGTt[$i"><mutation xmlns="http://www.w3.org/1999/xhtml" _expanded="3" _input_init="true"></mutation><field name="scale">MinimapScale.Half</field><value name="borderWidth"><shadow type="math_number" id="d,A9,:T5zfT%4)}5^6@}"><field name="NUM">2</field></shadow></value><value name="borderColor"><shadow type="colorindexpicker" id="$Q=*R(DNhZ}si7*O7Sxc"><field name="index">9</field></shadow></value></block></value></block></value><next><block type="minimap_includeSprite" id="KYJKJY+m*Fq1#r+QNDqD"><mutation xmlns="http://www.w3.org/1999/xhtml" _expanded="0" _input_init="false"></mutation><value name="sprite"><block type="variables_get" id="m0X1al{8.**4WA6@IZU3"><field name="VAR" id="Y/j4gX;GJ#4,.2~A|,,[">mySprite</field></block></value><value name="minimap"><block type="variables_get" id="?h?hV.s-Wi~(Ipu+h|%S"><field name="VAR" id="[U^O{r3)iI%k_mN-!xmt">myMinimap</field></block></value></block></next></block></next></block></next></block></statement></block></xml>